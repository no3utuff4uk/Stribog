/*
 * Implementation of hash function Stribog (GOST R 34.11.2012)
 */
package ru.no3utuff4uk.stribog;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Arrays;

/**
 *
 * @author no3utuff4uk
 */
public class StribogImpl implements Stribog{
    
    protected byte[] h;
    private byte[] sigma;
    private byte[] N;
    private final byte[] N512 = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00
    };
    private final byte[] N0 = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    
    private final int[] Pi = {
        0xFC, 0xEE, 0xDD, 0x11, 0xCF, 0x6E, 0x31, 0x16, 0xFB, 0xC4, 0xFA, 0xDA, 0x23, 0xC5, 0x04, 0x4D,
        0xE9, 0x77, 0xF0, 0xDB, 0x93, 0x2E, 0x99, 0xBA, 0x17, 0x36, 0xF1, 0xBB, 0x14, 0xCD, 0x5F, 0xC1,
        0xF9, 0x18, 0x65, 0x5A, 0xE2, 0x5C, 0xEF, 0x21, 0x81, 0x1C, 0x3C, 0x42, 0x8B, 0x01, 0x8E, 0x4F,
        0x05, 0x84, 0x02, 0xAE, 0xE3, 0x6A, 0x8F, 0xA0, 0x06, 0x0B, 0xED, 0x98, 0x7F, 0xD4, 0xD3, 0x1F,
        0xEB, 0x34, 0x2C, 0x51, 0xEA, 0xC8, 0x48, 0xAB, 0xF2, 0x2A, 0x68, 0xA2, 0xFD, 0x3A, 0xCE, 0xCC,
        0xB5, 0x70, 0x0E, 0x56, 0x08, 0x0C, 0x76, 0x12, 0xBF, 0x72, 0x13, 0x47, 0x9C, 0xB7, 0x5D, 0x87,
        0x15, 0xA1, 0x96, 0x29, 0x10, 0x7B, 0x9A, 0xC7, 0xF3, 0x91, 0x78, 0x6F, 0x9D, 0x9E, 0xB2, 0xB1,
        0x32, 0x75, 0x19, 0x3D, 0xFF, 0x35, 0x8A, 0x7E, 0x6D, 0x54, 0xC6, 0x80, 0xC3, 0xBD, 0x0D, 0x57,
        0xDF, 0xF5, 0x24, 0xA9, 0x3E, 0xA8, 0x43, 0xC9, 0xD7, 0x79, 0xD6, 0xF6, 0x7C, 0x22, 0xB9, 0x03,
        0xE0, 0x0F, 0xEC, 0xDE, 0x7A, 0x94, 0xB0, 0xBC, 0xDC, 0xE8, 0x28, 0x50, 0x4E, 0x33, 0x0A, 0x4A,
        0xA7, 0x97, 0x60, 0x73, 0x1E, 0x00, 0x62, 0x44, 0x1A, 0xB8, 0x38, 0x82, 0x64, 0x9F, 0x26, 0x41,
        0xAD, 0x45, 0x46, 0x92, 0x27, 0x5E, 0x55, 0x2F, 0x8C, 0xA3, 0xA5, 0x7D, 0x69, 0xD5, 0x95, 0x3B,
        0x07, 0x58, 0xB3, 0x40, 0x86, 0xAC, 0x1D, 0xF7, 0x30, 0x37, 0x6B, 0xE4, 0x88, 0xD9, 0xE7, 0x89,
        0xE1, 0x1B, 0x83, 0x49, 0x4C, 0x3F, 0xF8, 0xFE, 0x8D, 0x53, 0xAA, 0x90, 0xCA, 0xD8, 0x85, 0x61,
        0x20, 0x71, 0x67, 0xA4, 0x2D, 0x2B, 0x09, 0x5B, 0xCB, 0x9B, 0x25, 0xD0, 0xBE, 0xE5, 0x6C, 0x52,
        0x59, 0xA6, 0x74, 0xD2, 0xE6, 0xF4, 0xB4, 0xC0, 0xD1, 0x66, 0xAF, 0xC2, 0x39, 0x4B, 0x63, 0xB6
        };
    private final byte[] Tau ={
        0, 8, 16, 24, 32, 40, 48, 56,
        1, 9, 17, 25, 33, 41, 49, 57,
        2, 10, 18, 26, 34, 42, 50, 58,
        3, 11, 19, 27, 35, 43, 51, 59,
        4, 12, 20, 28, 36, 44, 52, 60,
        5, 13, 21, 29, 37, 45, 53, 61,
        6, 14, 22, 30, 38, 46, 54, 62,
        7, 15, 23, 31, 39, 47, 55, 63
        };
    
    private final int[][] A  = {
        {0x8e, 0x20, 0xfa, 0xa7, 0x2b, 0xa0, 0xb4, 0x70}, {0x47, 0x10, 0x7d, 0xdd, 0x9b, 0x50, 0x5a, 0x38}, 
        {0xad, 0x08, 0xb0, 0xe0, 0xc3, 0x28, 0x2d, 0x1c}, {0xd8, 0x04, 0x58, 0x70, 0xef, 0x14, 0x98, 0x0e},
        {0x6c, 0x02, 0x2c, 0x38, 0xf9, 0x0a, 0x4c, 0x07}, {0x36, 0x01, 0x16, 0x1c, 0xf2, 0x05, 0x26, 0x8d}, 
        {0x1b, 0x8e, 0x0b, 0x0e, 0x79, 0x8c, 0x13, 0xc8}, {0x83, 0x47, 0x8b, 0x07, 0xb2, 0x46, 0x87, 0x64},
        {0xa0, 0x11, 0xd3, 0x80, 0x81, 0x8e, 0x8f, 0x40}, {0x50, 0x86, 0xe7, 0x40, 0xce, 0x47, 0xc9, 0x20},
        {0x28, 0x43, 0xfd, 0x20, 0x67, 0xad, 0xea, 0x10}, {0x14, 0xaf, 0xf0, 0x10, 0xbd, 0xd8, 0x75, 0x08},
        {0x0a, 0xd9, 0x78, 0x08, 0xd0, 0x6c, 0xb4, 0x04}, {0x05, 0xe2, 0x3c, 0x04, 0x68, 0x36, 0x5a, 0x02}, 
        {0x8c, 0x71, 0x1e, 0x02, 0x34, 0x1b, 0x2d, 0x01}, {0x46, 0xb6, 0x0f, 0x01, 0x1a, 0x83, 0x98, 0x8e},
        {0x90, 0xda, 0xb5, 0x2a, 0x38, 0x7a, 0xe7, 0x6f}, {0x48, 0x6d, 0xd4, 0x15, 0x1c, 0x3d, 0xfd, 0xb9}, 
        {0x24, 0xb8, 0x6a, 0x84, 0x0e, 0x90, 0xf0, 0xd2}, {0x12, 0x5c, 0x35, 0x42, 0x07, 0x48, 0x78, 0x69},
        {0x09, 0x2e, 0x94, 0x21, 0x8d, 0x24, 0x3c, 0xba}, {0x8a, 0x17, 0x4a, 0x9e, 0xc8, 0x12, 0x1e, 0x5d},
        {0x45, 0x85, 0x25, 0x4f, 0x64, 0x09, 0x0f, 0xa0}, {0xac, 0xcc, 0x9c, 0xa9, 0x32, 0x8a, 0x89, 0x50},
        {0x9d, 0x4d, 0xf0, 0x5d, 0x5f, 0x66, 0x14, 0x51}, {0xc0, 0xa8, 0x78, 0xa0, 0xa1, 0x33, 0x0a, 0xa6}, 
        {0x60, 0x54, 0x3c, 0x50, 0xde, 0x97, 0x05, 0x53}, {0x30, 0x2a, 0x1e, 0x28, 0x6f, 0xc5, 0x8c, 0xa7},
        {0x18, 0x15, 0x0f, 0x14, 0xb9, 0xec, 0x46, 0xdd}, {0x0c, 0x84, 0x89, 0x0a, 0xd2, 0x76, 0x23, 0xe0}, 
        {0x06, 0x42, 0xca, 0x05, 0x69, 0x3b, 0x9f, 0x70}, {0x03, 0x21, 0x65, 0x8c, 0xba, 0x93, 0xc1, 0x38},
        {0x86, 0x27, 0x5d, 0xf0, 0x9c, 0xe8, 0xaa, 0xa8}, {0x43, 0x9d, 0xa0, 0x78, 0x4e, 0x74, 0x55, 0x54},
        {0xaf, 0xc0, 0x50, 0x3c, 0x27, 0x3a, 0xa4, 0x2a}, {0xd9, 0x60, 0x28, 0x1e, 0x9d, 0x1d, 0x52, 0x15},
        {0xe2, 0x30, 0x14, 0x0f, 0xc0, 0x80, 0x29, 0x84}, {0x71, 0x18, 0x0a, 0x89, 0x60, 0x40, 0x9a, 0x42},
        {0xb6, 0x0c, 0x05, 0xca, 0x30, 0x20, 0x4d, 0x21}, {0x5b, 0x06, 0x8c, 0x65, 0x18, 0x10, 0xa8, 0x9e},
        {0x45, 0x6c, 0x34, 0x88, 0x7a, 0x38, 0x05, 0xb9}, {0xac, 0x36, 0x1a, 0x44, 0x3d, 0x1c, 0x8c, 0xd2}, 
        {0x56, 0x1b, 0x0d, 0x22, 0x90, 0x0e, 0x46, 0x69}, {0x2b, 0x83, 0x88, 0x11, 0x48, 0x07, 0x23, 0xba},
        {0x9b, 0xcf, 0x44, 0x86, 0x24, 0x8d, 0x9f, 0x5d}, {0xc3, 0xe9, 0x22, 0x43, 0x12, 0xc8, 0xc1, 0xa0}, 
        {0xef, 0xfa, 0x11, 0xaf, 0x09, 0x64, 0xee, 0x50}, {0xf9, 0x7d, 0x86, 0xd9, 0x8a, 0x32, 0x77, 0x28},
        {0xe4, 0xfa, 0x20, 0x54, 0xa8, 0x0b, 0x32, 0x9c}, {0x72, 0x7d, 0x10, 0x2a, 0x54, 0x8b, 0x19, 0x4e}, 
        {0x39, 0xb0, 0x08, 0x15, 0x2a, 0xcb, 0x82, 0x27}, {0x92, 0x58, 0x04, 0x84, 0x15, 0xeb, 0x41, 0x9d},
        {0x49, 0x2c, 0x02, 0x42, 0x84, 0xfb, 0xae, 0xc0}, {0xaa, 0x16, 0x01, 0x21, 0x42, 0xf3, 0x57, 0x60}, 
        {0x55, 0x0b, 0x8e, 0x9e, 0x21, 0xf7, 0xa5, 0x30}, {0xa4, 0x8b, 0x47, 0x4f, 0x9e, 0xf5, 0xdc, 0x18},
        {0x70, 0xa6, 0xa5, 0x6e, 0x24, 0x40, 0x59, 0x8e}, {0x38, 0x53, 0xdc, 0x37, 0x12, 0x20, 0xa2, 0x47},
        {0x1c, 0xa7, 0x6e, 0x95, 0x09, 0x10, 0x51, 0xad}, {0x0e, 0xdd, 0x37, 0xc4, 0x8a, 0x08, 0xa6, 0xd8},
        {0x07, 0xe0, 0x95, 0x62, 0x45, 0x04, 0x53, 0x6c}, {0x8d, 0x70, 0xc4, 0x31, 0xac, 0x02, 0xa7, 0x36},
        {0xc8, 0x38, 0x62, 0x96, 0x56, 0x01, 0xdd, 0x1b}, {0x64, 0x1c, 0x31, 0x4b, 0x2b, 0x8e, 0xe0, 0x83}
        };  
    
    private final int[][] C = {
        {
        0xb1,0x08,0x5b,0xda,0x1e,0xca,0xda,0xe9,0xeb,0xcb,0x2f,0x81,0xc0,0x65,0x7c,0x1f,
        0x2f,0x6a,0x76,0x43,0x2e,0x45,0xd0,0x16,0x71,0x4e,0xb8,0x8d,0x75,0x85,0xc4,0xfc,
        0x4b,0x7c,0xe0,0x91,0x92,0x67,0x69,0x01,0xa2,0x42,0x2a,0x08,0xa4,0x60,0xd3,0x15,
        0x05,0x76,0x74,0x36,0xcc,0x74,0x4d,0x23,0xdd,0x80,0x65,0x59,0xf2,0xa6,0x45,0x07
        },
        {
        0x6f,0xa3,0xb5,0x8a,0xa9,0x9d,0x2f,0x1a,0x4f,0xe3,0x9d,0x46,0x0f,0x70,0xb5,0xd7,
        0xf3,0xfe,0xea,0x72,0x0a,0x23,0x2b,0x98,0x61,0xd5,0x5e,0x0f,0x16,0xb5,0x01,0x31,
        0x9a,0xb5,0x17,0x6b,0x12,0xd6,0x99,0x58,0x5c,0xb5,0x61,0xc2,0xdb,0x0a,0xa7,0xca,
        0x55,0xdd,0xa2,0x1b,0xd7,0xcb,0xcd,0x56,0xe6,0x79,0x04,0x70,0x21,0xb1,0x9b,0xb7
        },
        {
        0xf5,0x74,0xdc,0xac,0x2b,0xce,0x2f,0xc7,0x0a,0x39,0xfc,0x28,0x6a,0x3d,0x84,0x35,
        0x06,0xf1,0x5e,0x5f,0x52,0x9c,0x1f,0x8b,0xf2,0xea,0x75,0x14,0xb1,0x29,0x7b,0x7b,
        0xd3,0xe2,0x0f,0xe4,0x90,0x35,0x9e,0xb1,0xc1,0xc9,0x3a,0x37,0x60,0x62,0xdb,0x09,
        0xc2,0xb6,0xf4,0x43,0x86,0x7a,0xdb,0x31,0x99,0x1e,0x96,0xf5,0x0a,0xba,0x0a,0xb2
        },
        {
        0xef,0x1f,0xdf,0xb3,0xe8,0x15,0x66,0xd2,0xf9,0x48,0xe1,0xa0,0x5d,0x71,0xe4,0xdd,
        0x48,0x8e,0x85,0x7e,0x33,0x5c,0x3c,0x7d,0x9d,0x72,0x1c,0xad,0x68,0x5e,0x35,0x3f,
        0xa9,0xd7,0x2c,0x82,0xed,0x03,0xd6,0x75,0xd8,0xb7,0x13,0x33,0x93,0x52,0x03,0xbe,
        0x34,0x53,0xea,0xa1,0x93,0xe8,0x37,0xf1,0x22,0x0c,0xbe,0xbc,0x84,0xe3,0xd1,0x2e
        },
        {
        0x4b,0xea,0x6b,0xac,0xad,0x47,0x47,0x99,0x9a,0x3f,0x41,0x0c,0x6c,0xa9,0x23,0x63,
        0x7f,0x15,0x1c,0x1f,0x16,0x86,0x10,0x4a,0x35,0x9e,0x35,0xd7,0x80,0x0f,0xff,0xbd,
        0xbf,0xcd,0x17,0x47,0x25,0x3a,0xf5,0xa3,0xdf,0xff,0x00,0xb7,0x23,0x27,0x1a,0x16,
        0x7a,0x56,0xa2,0x7e,0xa9,0xea,0x63,0xf5,0x60,0x17,0x58,0xfd,0x7c,0x6c,0xfe,0x57
        },
        {
        0xae,0x4f,0xae,0xae,0x1d,0x3a,0xd3,0xd9,0x6f,0xa4,0xc3,0x3b,0x7a,0x30,0x39,0xc0,
        0x2d,0x66,0xc4,0xf9,0x51,0x42,0xa4,0x6c,0x18,0x7f,0x9a,0xb4,0x9a,0xf0,0x8e,0xc6,
        0xcf,0xfa,0xa6,0xb7,0x1c,0x9a,0xb7,0xb4,0x0a,0xf2,0x1f,0x66,0xc2,0xbe,0xc6,0xb6,
        0xbf,0x71,0xc5,0x72,0x36,0x90,0x4f,0x35,0xfa,0x68,0x40,0x7a,0x46,0x64,0x7d,0x6e
        },
        {
        0xf4,0xc7,0x0e,0x16,0xee,0xaa,0xc5,0xec,0x51,0xac,0x86,0xfe,0xbf,0x24,0x09,0x54,
        0x39,0x9e,0xc6,0xc7,0xe6,0xbf,0x87,0xc9,0xd3,0x47,0x3e,0x33,0x19,0x7a,0x93,0xc9,
        0x09,0x92,0xab,0xc5,0x2d,0x82,0x2c,0x37,0x06,0x47,0x69,0x83,0x28,0x4a,0x05,0x04,
        0x35,0x17,0x45,0x4c,0xa2,0x3c,0x4a,0xf3,0x88,0x86,0x56,0x4d,0x3a,0x14,0xd4,0x93
        },
        {
        0x9b,0x1f,0x5b,0x42,0x4d,0x93,0xc9,0xa7,0x03,0xe7,0xaa,0x02,0x0c,0x6e,0x41,0x41,
        0x4e,0xb7,0xf8,0x71,0x9c,0x36,0xde,0x1e,0x89,0xb4,0x44,0x3b,0x4d,0xdb,0xc4,0x9a,
        0xf4,0x89,0x2b,0xcb,0x92,0x9b,0x06,0x90,0x69,0xd1,0x8d,0x2b,0xd1,0xa5,0xc4,0x2f,
        0x36,0xac,0xc2,0x35,0x59,0x51,0xa8,0xd9,0xa4,0x7f,0x0d,0xd4,0xbf,0x02,0xe7,0x1e
        },
        {
        0x37,0x8f,0x5a,0x54,0x16,0x31,0x22,0x9b,0x94,0x4c,0x9a,0xd8,0xec,0x16,0x5f,0xde,
        0x3a,0x7d,0x3a,0x1b,0x25,0x89,0x42,0x24,0x3c,0xd9,0x55,0xb7,0xe0,0x0d,0x09,0x84,
        0x80,0x0a,0x44,0x0b,0xdb,0xb2,0xce,0xb1,0x7b,0x2b,0x8a,0x9a,0xa6,0x07,0x9c,0x54,
        0x0e,0x38,0xdc,0x92,0xcb,0x1f,0x2a,0x60,0x72,0x61,0x44,0x51,0x83,0x23,0x5a,0xdb
        },
        {
        0xab,0xbe,0xde,0xa6,0x80,0x05,0x6f,0x52,0x38,0x2a,0xe5,0x48,0xb2,0xe4,0xf3,0xf3,
        0x89,0x41,0xe7,0x1c,0xff,0x8a,0x78,0xdb,0x1f,0xff,0xe1,0x8a,0x1b,0x33,0x61,0x03,
        0x9f,0xe7,0x67,0x02,0xaf,0x69,0x33,0x4b,0x7a,0x1e,0x6c,0x30,0x3b,0x76,0x52,0xf4,
        0x36,0x98,0xfa,0xd1,0x15,0x3b,0xb6,0xc3,0x74,0xb4,0xc7,0xfb,0x98,0x45,0x9c,0xed
        },
        {
        0x7b,0xcd,0x9e,0xd0,0xef,0xc8,0x89,0xfb,0x30,0x02,0xc6,0xcd,0x63,0x5a,0xfe,0x94,
        0xd8,0xfa,0x6b,0xbb,0xeb,0xab,0x07,0x61,0x20,0x01,0x80,0x21,0x14,0x84,0x66,0x79,
        0x8a,0x1d,0x71,0xef,0xea,0x48,0xb9,0xca,0xef,0xba,0xcd,0x1d,0x7d,0x47,0x6e,0x98,
        0xde,0xa2,0x59,0x4a,0xc0,0x6f,0xd8,0x5d,0x6b,0xca,0xa4,0xcd,0x81,0xf3,0x2d,0x1b
        },
        {
        0x37,0x8e,0xe7,0x67,0xf1,0x16,0x31,0xba,0xd2,0x13,0x80,0xb0,0x04,0x49,0xb1,0x7a,
        0xcd,0xa4,0x3c,0x32,0xbc,0xdf,0x1d,0x77,0xf8,0x20,0x12,0xd4,0x30,0x21,0x9f,0x9b,
        0x5d,0x80,0xef,0x9d,0x18,0x91,0xcc,0x86,0xe7,0x1d,0xa4,0xaa,0x88,0xe1,0x28,0x52,
        0xfa,0xf4,0x17,0xd5,0xd9,0xb2,0x1b,0x99,0x48,0xbc,0x92,0x4a,0xf1,0x1b,0xd7,0x20
        }
        };
    
    protected void init(boolean outputMode)
    {
        h = new byte[64];
        if(!outputMode)
            Arrays.fill(h, (byte)0x01);
        else
            Arrays.fill(h, (byte)0x00);
        
        N = new byte[64];
        Arrays.fill(N, (byte)0x00);
        
        sigma = new byte[64];
        Arrays.fill(sigma, (byte)0x00);
    }
    
    @Override
    public byte[] getHash(File file, boolean outputMode) {
        init(outputMode);
        byte[] buffer = new byte[64];
        try(RandomAccessFile IStream = new RandomAccessFile(file, "r");)
        { 
            long length = IStream.length();
            for(;length >= 64; length -=64)
            {
                IStream.seek(length - 64);
                IStream.read(buffer, 0, 64);
                
                hashPart(buffer);
            }
            if(length != 0)
            {
                IStream.seek(0);
                buffer = new byte[(int)length];
                IStream.read(buffer, 0, (int)length);
                hashPart(buffer);
            }
        }
        catch(IOException exception)
        {
            System.err.println(exception.toString());
        }
        if(outputMode)
            return h;
        return Arrays.copyOf(h, 32);
    }

    @Override
    public byte[] getHash(String file, boolean outputMode) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public byte[] getHash(byte[] message, boolean outputMode) {
        init(outputMode);
        return generateHash(message, outputMode);
    }
    
    protected void hashPart(byte[] messagePart)
    {
        if(messagePart.length == 64)
        {
            h = compression(N, messagePart, h);
            N = addModule(N, N512);
            sigma = addModule(sigma, messagePart);
        }
        else
        {
            int inc = 0;
            int length = messagePart.length * 8;
            
            byte[] tmpMessage = new byte[64];
            Arrays.fill(tmpMessage, (byte) 0x00);
            tmpMessage[64 - messagePart.length - 1] = (byte) 0x01;
            
            for(int i = 64 - messagePart.length; i < 64; i++)
                tmpMessage[i] = messagePart[i + messagePart.length - 64];
            
            messagePart = tmpMessage;
            
            h = compression(N, messagePart, h);
        
            byte[] NMessage = new byte[64];
            Arrays.fill(NMessage, (byte) 0x00);

            
            while(length > 0)
            {
                NMessage[63 - inc] = (byte) (length & 0xff);
                length >>= 8;
                inc++;
            }

            N = addModule(N, NMessage);
            sigma = addModule(sigma, messagePart);

            h = compression(N0, N, h);
            h = compression(N0, sigma, h);
        }
    }
    
    
    /**
     * Старая версия. Создана первой для работы с массивом.
     * @param message
     * @param outputMode
     * @return хеш 
     */
    private byte[] generateHash(byte[] message, boolean outputMode)
    {        
        int length = message.length * 8;
        int inc = 0;
        
        while(length >= 512)
        {
            inc++;
            byte[] tmp = Arrays.copyOfRange(message, message.length - 64*(inc), message.length - (inc-1)*64);
            h = compression(N, tmp, h);
            N = addModule(N, N512);
            sigma = addModule(sigma, tmp);
            length -=512;
        }
        
        message = Arrays.copyOf(message, message.length - 64*inc);
        
        if(message.length < 64) //обработка сообщения длинной < 512 бит
        {
            byte[] tmpMessage = new byte[64];
            Arrays.fill(tmpMessage, (byte) 0x00);
            tmpMessage[64 - message.length - 1] = (byte) 0x01;
            
            for(int i = 64 - message.length; i < 64; i++)
                tmpMessage[i] = message[i + message.length - 64];
            
            message = tmpMessage;
        }
            
        h = compression(N, message, h);
        
        byte[] NMessage = new byte[64];
        Arrays.fill(NMessage, (byte) 0x00);
        
        inc = 0;
        while(length > 0)
        {
            NMessage[63 - inc] = (byte) (length & 0xff);
            length >>= 8;
            inc++;
        }
        
        N = addModule(N, NMessage);
        sigma = addModule(sigma, message);

        h = compression(N0, N, h);
        h = compression(N0, sigma, h);
        
        if(outputMode)
            return h;
        return Arrays.copyOf(h, 32);
    }
    
    private byte[] addModule(byte[] a, byte[] b)
    {        
        byte[] result = new byte[64];
        int t = 0;
        
        for(int i = 63; i >= 0; i--)
        {
            t = ((int) a[i] & 0xff) + ((int) b[i] & 0xff)  + (t >> 8);
            result[i] = (byte) (t & 0xff);
        }
        return result;
    }
    
    private byte[] xor(byte[] a, byte[] b)
    {
        byte[] result = new byte[a.length];
        for(int i = 0; i < a.length; i++)
            result[i] = (byte) (a[i] ^ b[i]);
        return result;
    }
    
    private byte[] compression(byte [] N, byte[] m, byte[] h)
    {
        
        byte[] K;
        K = xor(h, N);
        K = Stransformation(K);
        K = Ptransformation(K);
        K = Ltransformation(K);
        
        byte[] t = Etransformation(K, m);
        t = xor(h, t);
        byte[] result = xor(t, m);
            
        return result;
    }
    
    private byte[] Etransformation(byte[] K, byte[] m)
    {
        byte[] state;
        
        state = xor(K, m);
        for(int i = 0; i < 12; i++)
        {
            state = Stransformation(state);
            state = Ptransformation(state);
            state = Ltransformation(state);

            K = KeyShedule(K, i);
            state = xor(state, K);
        }
        
        return state;
    }
    
    private byte[] KeyShedule(byte[] K, int i)
    {
        for(int j = 0; j < K.length; j++)
            K[j] ^= (byte) C[i][j];
        
        K = Stransformation(K);
        K = Ptransformation(K);
        K = Ltransformation(K);
        
        return K;
    }
    
    private byte[] Stransformation(byte[] a)
    {        
        byte[] result = new byte[64];
        
        for(int i = 0; i < 64; i++)
            result[i] = (byte)Pi[((int)a[i] & 0xFF)];
        
        return result;
    }
    
    private byte[] Ptransformation(byte[] a)
    {
        byte[] result = new byte[64];
        
        for(int i = 0; i < 64; i++)
            result[i] = a[Tau[i]];
        
        return result;
    }
    
    private byte[] Ltransformation(byte[] a)
    {
        byte[] result = new byte[64];
        for(int i = 0; i < 8; i++)
        {
            for(int k = 0; k < 8; k++)
            {
                for(int j = 0; j < 8; j++)
                {
                    if((a[i*8+k] & (0x1 << (7-j))) != 0) 
                    {
                        for(int l = 0; l < 8; l++)
                            result[8*i+l] ^= (byte)A[k*8+j][l];
                    }
                }
            }
        }
        return result;
    }
    
}
